package DataBase;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import projectCalculatorMain.DataBaseDetails;
/**
 *
 * @author Roxven89
 */
public class DataBaseConnector {

    private final String dataBaseHost = "jdbc:derby:C:/Users/Public/ProjectCalculatorDataBase";
    private final String dataBaseHostCreate = "jdbc:derby:C:/Users/Public/ProjectCalculatorDataBase;create=true;";
    private final String driver = "org.apache.derby.jdbc.EmbeddedDriver";
    private final String user = "Swarco";
    private final String password = "Swarco";
    private final String end = "jdbc:derby:C:/Users/Public/ProjectCalculatorDataBase;shutdown=true";
    
    private final String sqlCreateTableMaterials = "CREATE TABLE MATERIALS " + 
            "(ID INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1), " + 
            "MATERIAL_NAME VARCHAR(40), " + 
            "MATERIAL_UNIT VARCHAR(40), " + 
            "MATERIAL_PRICE DECIMAL(12,2), " + 
            "MATERIAL_VAT_RATE VARCHAR(40), " + 
            "MATERIAL_VENDOR VARCHAR(40), " + 
            "MATERIAL_DATE_OF_ENTRY DATE)";
    
    private final String sqlCreateTableSubconstructors = "CREATE TABLE SUBCONSTRUCTORS " + 
            "(ID INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1), " + 
            "SUBCONSTRUCTOR_NAME VARCHAR(40), " + 
            "SUBCONSTRUCTOR_UNIT VARCHAR(40), " + 
            "SUBCONSTRUCTOR_PRICE DECIMAL(12,2), " + 
            "SUBCONSTRUCTOR_VAT_RATE VARCHAR(40), " + 
            "SUBCONSTRUCTOR_VENDOR VARCHAR(40), " + 
            "SUBCONSTRUCTOR_DATE_OF_ENTRY DATE)";
    
    private final String sqlCreateTableLabour = "CREATE TABLE LABOUR " + 
            "(ID INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1), " +
            "LABOUR_EMPLOYEE_NAME VARCHAR(40), " + 
            "LABOUR_UNIT VARCHAR(40), " + 
            "LABOUR_COST_ DECIMAL(12,2), " + 
            "LABOUR_GROSS_OVERHEAD VARCHAR(40), " + 
            "LABOUR_EMPLOYEE_TYPE VARCHAR(40), " + 
            "LABOUR_DATE_OF_ENTRY DATE)";
    
    private final String sqlCreateTableLogistic = "CREATE TABLE LOGISTIC " + 
            "(ID INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1), " + 
            "LOGISTIC_NAME VARCHAR(40), " + 
            "LOGISTIC_UNIT VARCHAR(40), " + 
            "LOGISTIC_PRICE DECIMAL(12,2), " + 
            "LOGISTIC_VAT_RATE VARCHAR(40), " + 
            "LOGISTIC_VENDOR VARCHAR(40), " + 
            "LOGISTIC_DATE_OF_ENTRY DATE)";
    
    private final String sqlCreateTableOtherCosts = "CREATE TABLE OTHERCOSTS " + 
            "(ID INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1), " + 
            "OTHERCOSTS_NAME VARCHAR(40), " + 
            "OTHERCOSTS_UNIT VARCHAR(40), " + 
            "OTHERCOSTS_PRICE DECIMAL(12,2), " + 
            "OTHERCOSTS_VAT_RATE VARCHAR(40), " + 
            "OTHERCOSTS_VENDOR VARCHAR(40), " + 
            "OTHERCOSTS_DATE_OF_ENTRY DATE)";
    
    Connection connection;
    DatabaseMetaData metaData;
    Statement statement;
    ObservableList<DataBaseDetails>list;

    public DataBaseConnector() {
        
        addDriver();
        
        try {
            connection = DriverManager.getConnection(dataBaseHost, user, password);
        } catch (SQLException error) {
            System.out.print(error);
            
            try {
                connection = DriverManager.getConnection(dataBaseHostCreate, user, password);
                statement = connection.createStatement();
                
                statement.addBatch(sqlCreateTableMaterials);
                statement.addBatch(sqlCreateTableSubconstructors);
                statement.addBatch(sqlCreateTableLabour);
                statement.addBatch(sqlCreateTableLogistic);
                statement.addBatch(sqlCreateTableOtherCosts);
               
                statement.executeBatch();
                statement.close();
                
            } catch (SQLException errorX) {
                System.out.print(errorX);
            }  
        } finally {
            
            try {
                connection = DriverManager.getConnection(end);
            } catch (SQLException error) {
                System.out.print(error);
            }
        }
    }
    
    public void connectToDataBase(){
        addDriver();
        try {
            connection = DriverManager.getConnection(dataBaseHost, user, password);
            statement = connection.createStatement();
        } catch (SQLException error) {
            System.out.print(error);
        }
    }
    
    private void addDriver(){
        try {
            Class.forName(driver);
        } catch (java.lang.ClassNotFoundException error) {
            System.out.print(error);
        }
    }
    
    public void addToDataBase(String costType){
        try {
            statement.executeUpdate(costType);
            statement.close();
        } catch (SQLException error) {
             System.out.print(error);
        } finally {
            try {
                connection = DriverManager.getConnection(end);
            } catch (SQLException error) {
                System.out.print(error);
            }
        }
    }
    
    public void lookForDataBase(String formula, String lookingFraze, TableView tableView,
            TableColumn column0,TableColumn column1, TableColumn column2, 
            TableColumn column3, TableColumn column4, TableColumn column5, 
            TableColumn column6){
        
        list = FXCollections.observableArrayList();
        
        try{
            list.clear();
            tableView.getItems().clear();
            String sentence = formula + lookingFraze;
            ResultSet result = statement.executeQuery(sentence);
            while(result.next()){
                String id = String.valueOf(result.getString(1));
                String name = result.getString(2);
                String unit = result.getString(3);
                String price = String.valueOf(result.getDouble(4)) + " zł";
                String rate = result.getString(5);
                String vendor = result.getString(6);
                String date = String.valueOf(result.getDate(7));
                
                list.add(new DataBaseDetails(id, name, unit, price, rate, vendor, date));
            }
            statement.close();
        } catch (SQLException error){
             System.out.print(error);
        } finally {
            try {
                connection = DriverManager.getConnection(end);
            } catch (SQLException error) {
                System.out.print(error);
            }
        }
        
        column0.setCellValueFactory(new PropertyValueFactory<>("id"));
        column1.setCellValueFactory(new PropertyValueFactory<>("name"));
        column2.setCellValueFactory(new PropertyValueFactory<>("unit"));
        column3.setCellValueFactory(new PropertyValueFactory<>("price"));
        column4.setCellValueFactory(new PropertyValueFactory<>("vat"));
        column5.setCellValueFactory(new PropertyValueFactory<>("vendor"));
        column6.setCellValueFactory(new PropertyValueFactory<>("date"));
        
        tableView.setItems(null);
        tableView.setItems(list);
    }
    
    public void lookForDataBaseByID(String formula, String lookingFraze, Label infoTextField, 
            Button removeButton, Button resetButton, Button pickButton, TextField idTextField){
        String correctID = "THIS ID DOES NOT EXIST IN DATABASE!";
        try {
            String sentence = formula + lookingFraze;
            ResultSet result = statement.executeQuery(sentence);
            if(result.next()){
            String name = result.getString(1);
            String unit = result.getString(2);
            String price = String.valueOf(result.getDouble(3)) + " zł";
            String rate = result.getString(4);
            String vendor = result.getString(5);
            String date = String.valueOf(result.getDate(6));
            String labelData ="Material: " + name + " |  Unit: " + unit + " | Price: "
                    + price + " | VAT: " + rate + 
                    " | Supplier: " + vendor + " | Price Date: " + date;
            infoTextField.setText(labelData);
            removeButton.setDisable(false);
            resetButton.setDisable(false);
            pickButton.setDisable(true);
            idTextField.setDisable(true);
            }
            else{
                infoTextField.setText(correctID);
            }
            statement.close();
        } catch (SQLException error) {
             System.out.print(error);
        } finally {
            try {
                connection = DriverManager.getConnection(end);
            } catch (SQLException error) {
                System.out.print(error);
            }
        }
    }
    
    public void removeFromDataBase(String formula, String lookingFraze){
        try {
            String sentence = formula + lookingFraze;
            int result = statement.executeUpdate(sentence);
            statement.close();
        } catch (SQLException error) {
            System.out.print(error);
        } finally {
            try {
                connection = DriverManager.getConnection(end);
            } catch (SQLException error) {
                System.out.print(error);
            }
        }
    }
    
    public void dataFromMaterialToChange(String formula, String lookingFraze, 
            TextField iD, TextField materialName, TextField netPrice, 
            DatePicker dayOfPrice, ChoiceBox unitOfMeasure, ChoiceBox vatRate, 
            TextField supplier, Button save, ObservableList listUnit, ObservableList listRate){
      
        try {
            String sentence = formula + lookingFraze;
            ResultSet result = statement.executeQuery(sentence);
            
            if(result.next()){
            dayOfPrice.setDisable(false);
            save.setDisable(false);
            iD.setDisable(true);
            
            String name = result.getString(1);
            materialName.setText(name);
            unitOfMeasure.setItems(FXCollections.observableArrayList(listUnit));
            String unit = result.getString(2);
            switch(unit){
                case "mm (millimeter)":
                    unitOfMeasure.getSelectionModel().select(0);
                    break;
                case "cm (centimeter)":
                    unitOfMeasure.getSelectionModel().select(1);
                    break;
                case "m (meter)":
                    unitOfMeasure.getSelectionModel().select(2);
                    break;
                case "km (kilometer)":
                    unitOfMeasure.getSelectionModel().select(3);
                    break;
                case "g (gram)":
                    unitOfMeasure.getSelectionModel().select(4);
                    break;
                case "kg (kilogram)":
                    unitOfMeasure.getSelectionModel().select(5);
                    break;
                case "t (ton)":
                    unitOfMeasure.getSelectionModel().select(6);
                    break;
                case "pc (piece)":
                    unitOfMeasure.getSelectionModel().select(7);
                    break;
                case "par (pair)":
                    unitOfMeasure.getSelectionModel().select(8);
                    break;
            }
            String price = String.valueOf(result.getDouble(3));
            netPrice.setText(price);
            vatRate.setItems(FXCollections.observableArrayList(listRate));
            String rate = result.getString(4);
            switch(rate){
                case "0%":
                    vatRate.getSelectionModel().select(0);
                    break;
                case "5%":
                    vatRate.getSelectionModel().select(1);
                    break;
                case "8%":
                    vatRate.getSelectionModel().select(2);
                    break;
                case "23%":
                    vatRate.getSelectionModel().select(3);
                    break;
                case "RC (Reverse Charge)":
                    vatRate.getSelectionModel().select(4);
                    break;
            }
            String vendor = result.getString(5);
            supplier.setText(vendor);
            String date = String.valueOf(result.getDate(6));
            dayOfPrice.setValue(LocalDate.parse(date));
            }
            else{
                materialName.clear();
                netPrice.clear();
                supplier.clear();
            }
            statement.close();
        } catch (SQLException error) {
             System.out.print(error);
        } finally {
            try {
                connection = DriverManager.getConnection(end);
            } catch (SQLException error) {
                System.out.print(error);
            }
        }
    }
    
    public void saveMaterialData(String name, String unit, BigDecimal price,
            String rate, String vendor, Date date, int ID) {
        
        final String updateMaterialFields = "UPDATE MATERIALS SET MATERIAL_NAME = ?, "
            + "MATERIAL_UNIT = ?, MATERIAL_PRICE = ?, MATERIAL_VAT_RATE = ?, "
            + "MATERIAL_VENDOR = ?, MATERIAL_DATE_OF_ENTRY = ? WHERE ID = ?";
 
        try (PreparedStatement pstmt = connection.prepareStatement(updateMaterialFields)) {
            
            pstmt.setInt(7, ID);
            pstmt.setString(1, name);
            pstmt.setString(2, unit);
            pstmt.setBigDecimal(3, price);
            pstmt.setString(4, rate);
            pstmt.setString(5, vendor);
            pstmt.setDate(6, date);
            
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }finally {
            try {
                connection = DriverManager.getConnection(end);
            } catch (SQLException error) {
                System.out.print(error);
            }
        }
    }
}